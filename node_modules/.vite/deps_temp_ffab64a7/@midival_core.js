var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// ../../../node_modules/@hypersphere/omnibus/Registrator.js
var require_Registrator = __commonJS({
  "../../../node_modules/@hypersphere/omnibus/Registrator.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    var _bus;
    var _registered;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OmnibusRegistrator = void 0;
    var OmnibusRegistrator = class {
      constructor(bus) {
        _bus.set(this, void 0);
        _registered.set(this, void 0);
        __classPrivateFieldSet(this, _bus, bus);
        __classPrivateFieldSet(this, _registered, []);
      }
      on(event, fn) {
        __classPrivateFieldGet(this, _bus).on(event, fn);
        __classPrivateFieldGet(this, _registered).push({
          name: event,
          fn
        });
        return () => {
          this.off(event, fn);
        };
      }
      off(name, fn) {
        const properCall = __classPrivateFieldGet(this, _registered).find((entry) => entry.name === name && entry.fn === fn);
        if (!properCall) {
          throw new Error("Event you are trying to unregister was not registered via this Registrator");
        }
        this.off(name, fn);
        __classPrivateFieldSet(this, _registered, __classPrivateFieldGet(this, _registered).filter((entry) => !(entry.name === name && entry.fn === fn)));
      }
      offAll() {
        __classPrivateFieldGet(this, _registered).forEach(({ name, fn }) => {
          __classPrivateFieldGet(this, _bus).off(name, fn);
        });
        __classPrivateFieldSet(this, _registered, []);
      }
    };
    exports.OmnibusRegistrator = OmnibusRegistrator;
    _bus = /* @__PURE__ */ new WeakMap(), _registered = /* @__PURE__ */ new WeakMap();
  }
});

// ../../../node_modules/@hypersphere/omnibus/Omnibus.js
var require_Omnibus = __commonJS({
  "../../../node_modules/@hypersphere/omnibus/Omnibus.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    var _callbacks;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Omnibus = void 0;
    var Registrator_1 = require_Registrator();
    var Omnibus = class {
      constructor() {
        _callbacks.set(this, void 0);
        __classPrivateFieldSet(this, _callbacks, /* @__PURE__ */ new Map());
      }
      on(event, fn) {
        if (!__classPrivateFieldGet(this, _callbacks).has(event)) {
          __classPrivateFieldGet(this, _callbacks).set(event, []);
        }
        const arr = __classPrivateFieldGet(this, _callbacks).get(event);
        arr.push(fn);
        return () => {
          this.off(event, fn);
        };
      }
      off(event, fn) {
        const callbacks = __classPrivateFieldGet(this, _callbacks).get(event) || [];
        __classPrivateFieldGet(this, _callbacks).set(event, callbacks.filter((f) => f !== fn));
      }
      offAll() {
        __classPrivateFieldSet(this, _callbacks, /* @__PURE__ */ new Map());
      }
      async trigger(event, ...args) {
        const calls = __classPrivateFieldGet(this, _callbacks).get(event) || [];
        return Promise.all(calls.map((c) => c(...args))).then(() => {
          return;
        });
      }
      getRegistrator() {
        return new Registrator_1.OmnibusRegistrator(this);
      }
    };
    exports.Omnibus = Omnibus;
    _callbacks = /* @__PURE__ */ new WeakMap();
  }
});

// ../../../node_modules/@hypersphere/omnibus/index.js
var require_omnibus = __commonJS({
  "../../../node_modules/@hypersphere/omnibus/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OmnibusRegistrator = exports.Omnibus = void 0;
    var Omnibus_1 = require_Omnibus();
    Object.defineProperty(exports, "Omnibus", { enumerable: true, get: function() {
      return Omnibus_1.Omnibus;
    } });
    var Registrator_1 = require_Registrator();
    Object.defineProperty(exports, "OmnibusRegistrator", { enumerable: true, get: function() {
      return Registrator_1.OmnibusRegistrator;
    } });
  }
});

// ../../../node_modules/@midival/core/dist/utils/MIDIMessageConvert.js
var require_MIDIMessageConvert = __commonJS({
  "../../../node_modules/@midival/core/dist/utils/MIDIMessageConvert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toMidiMessage = exports.makeMessage = exports.isChannelMode = void 0;
    var isChannelMode = (channel) => channel >= 120;
    exports.isChannelMode = isChannelMode;
    var makeMessage = ({ channel, command, data1, data2 }) => {
      return Uint8Array.from([command + (channel - 1), data1, data2]);
    };
    exports.makeMessage = makeMessage;
    var toMidiMessage = ([status, data1, data2]) => {
      const command = status >> 4 << 4;
      const channel = status - command + 1;
      return {
        channel,
        command,
        data1,
        data2
      };
    };
    exports.toMidiMessage = toMidiMessage;
  }
});

// ../../../node_modules/@midival/core/dist/utils/pitchBend.js
var require_pitchBend = __commonJS({
  "../../../node_modules/@midival/core/dist/utils/pitchBend.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.splitValueIntoFraction = exports.uIntsIntoNumber = exports.splitNumberIntoUInt8s = exports.fractionToPitchBendAsUints = exports.fractionToPitchBend = void 0;
    var fractionToPitchBend = (n) => {
      if (n < -1 || n > 1) {
        throw new Error("Pitch bend value outside the range");
      }
      return Math.ceil((n + 1) * 16383 / 2);
    };
    exports.fractionToPitchBend = fractionToPitchBend;
    var fractionToPitchBendAsUints = (n) => {
      return (0, exports.splitNumberIntoUInt8s)((0, exports.fractionToPitchBend)(n));
    };
    exports.fractionToPitchBendAsUints = fractionToPitchBendAsUints;
    var splitNumberIntoUInt8s = (n) => {
      let arr = [];
      arr[0] = (1 << 7) - 1 & n;
      arr[1] = n >> 7;
      return arr;
    };
    exports.splitNumberIntoUInt8s = splitNumberIntoUInt8s;
    var uIntsIntoNumber = (arr) => {
      return arr[0] + (arr[1] << 7);
    };
    exports.uIntsIntoNumber = uIntsIntoNumber;
    var splitValueIntoFraction = (arr) => {
      return ((0, exports.uIntsIntoNumber)(arr) / 16363 - 0.5) * 2;
    };
    exports.splitValueIntoFraction = splitValueIntoFraction;
  }
});

// ../../../node_modules/@midival/core/dist/utils/midiCommands.js
var require_midiCommands = __commonJS({
  "../../../node_modules/@midival/core/dist/utils/midiCommands.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MidiCommand = void 0;
    exports.MidiCommand = {
      NoteOn: 9 << 4,
      NoteOff: 8 << 4,
      PolyKeyPressure: 10 << 4,
      ControlChange: 11 << 4,
      ProgramChange: 12 << 4,
      ChannelPressure: 13 << 4,
      PitchBend: 14 << 4,
      Sysex: 15 << 4,
      Clock: {
        Start: 250,
        Continue: 251,
        Stop: 252,
        Pulse: 248
      }
    };
  }
});

// ../../../node_modules/@midival/core/dist/utils/midiControlChanges.js
var require_midiControlChanges = __commonJS({
  "../../../node_modules/@midival/core/dist/utils/midiControlChanges.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MidiControlChange = void 0;
    var MidiControlChange;
    (function(MidiControlChange2) {
      MidiControlChange2[MidiControlChange2["BankSelect"] = 0] = "BankSelect";
      MidiControlChange2[MidiControlChange2["ModulationWheel"] = 1] = "ModulationWheel";
      MidiControlChange2[MidiControlChange2["BreathController"] = 2] = "BreathController";
      MidiControlChange2[MidiControlChange2["FootController"] = 4] = "FootController";
      MidiControlChange2[MidiControlChange2["PortamentoTile"] = 5] = "PortamentoTile";
      MidiControlChange2[MidiControlChange2["DataEntryMSB"] = 6] = "DataEntryMSB";
      MidiControlChange2[MidiControlChange2["ChannelVolume"] = 7] = "ChannelVolume";
      MidiControlChange2[MidiControlChange2["Balance"] = 8] = "Balance";
      MidiControlChange2[MidiControlChange2["Pan"] = 10] = "Pan";
      MidiControlChange2[MidiControlChange2["ExpressionController"] = 11] = "ExpressionController";
      MidiControlChange2[MidiControlChange2["EffectControl1"] = 12] = "EffectControl1";
      MidiControlChange2[MidiControlChange2["EffectControl2"] = 13] = "EffectControl2";
      MidiControlChange2[MidiControlChange2["GeneralPurposeController1"] = 16] = "GeneralPurposeController1";
      MidiControlChange2[MidiControlChange2["GeneralPurposeController2"] = 17] = "GeneralPurposeController2";
      MidiControlChange2[MidiControlChange2["GeneralPurposeController3"] = 18] = "GeneralPurposeController3";
      MidiControlChange2[MidiControlChange2["GeneralPurposeController4"] = 19] = "GeneralPurposeController4";
      MidiControlChange2[MidiControlChange2["BankSelectLSB"] = 32] = "BankSelectLSB";
      MidiControlChange2[MidiControlChange2["ModulationWheelLSB"] = 33] = "ModulationWheelLSB";
      MidiControlChange2[MidiControlChange2["BreathControllerLSB"] = 34] = "BreathControllerLSB";
      MidiControlChange2[MidiControlChange2["FootControllerLSB"] = 36] = "FootControllerLSB";
      MidiControlChange2[MidiControlChange2["PortamentoTileLSB"] = 37] = "PortamentoTileLSB";
      MidiControlChange2[MidiControlChange2["DataEntryLSB"] = 38] = "DataEntryLSB";
      MidiControlChange2[MidiControlChange2["ChannelVolumeLSB"] = 39] = "ChannelVolumeLSB";
      MidiControlChange2[MidiControlChange2["BalanceLSB"] = 40] = "BalanceLSB";
      MidiControlChange2[MidiControlChange2["PanLSB"] = 42] = "PanLSB";
      MidiControlChange2[MidiControlChange2["ExpressionControllerLSB"] = 43] = "ExpressionControllerLSB";
      MidiControlChange2[MidiControlChange2["EffectControl1LSB"] = 48] = "EffectControl1LSB";
      MidiControlChange2[MidiControlChange2["EffectControl2LSB"] = 49] = "EffectControl2LSB";
      MidiControlChange2[MidiControlChange2["EffectControl3LSB"] = 50] = "EffectControl3LSB";
      MidiControlChange2[MidiControlChange2["EffectControl4LSB"] = 51] = "EffectControl4LSB";
      MidiControlChange2[MidiControlChange2["Sustain"] = 64] = "Sustain";
      MidiControlChange2[MidiControlChange2["Portamento"] = 65] = "Portamento";
      MidiControlChange2[MidiControlChange2["Sostenuto"] = 66] = "Sostenuto";
      MidiControlChange2[MidiControlChange2["SoftPedal"] = 67] = "SoftPedal";
      MidiControlChange2[MidiControlChange2["LegatoFootswitch"] = 68] = "LegatoFootswitch";
      MidiControlChange2[MidiControlChange2["Hold2"] = 69] = "Hold2";
      MidiControlChange2[MidiControlChange2["SoundController1"] = 70] = "SoundController1";
      MidiControlChange2[MidiControlChange2["SoundController2"] = 71] = "SoundController2";
      MidiControlChange2[MidiControlChange2["SoundController3"] = 72] = "SoundController3";
      MidiControlChange2[MidiControlChange2["SoundController4"] = 73] = "SoundController4";
      MidiControlChange2[MidiControlChange2["SoundController5"] = 74] = "SoundController5";
      MidiControlChange2[MidiControlChange2["SoundController6"] = 75] = "SoundController6";
      MidiControlChange2[MidiControlChange2["SoundController7"] = 76] = "SoundController7";
      MidiControlChange2[MidiControlChange2["SoundController8"] = 77] = "SoundController8";
      MidiControlChange2[MidiControlChange2["SoundController9"] = 78] = "SoundController9";
      MidiControlChange2[MidiControlChange2["SoundController10"] = 79] = "SoundController10";
      MidiControlChange2[MidiControlChange2["SoundVariation"] = 70] = "SoundVariation";
      MidiControlChange2[MidiControlChange2["TimbreIntensitivity"] = 71] = "TimbreIntensitivity";
      MidiControlChange2[MidiControlChange2["ReleaseTime"] = 72] = "ReleaseTime";
      MidiControlChange2[MidiControlChange2["AttackTime"] = 73] = "AttackTime";
      MidiControlChange2[MidiControlChange2["Brightness"] = 74] = "Brightness";
      MidiControlChange2[MidiControlChange2["DecayTime"] = 75] = "DecayTime";
      MidiControlChange2[MidiControlChange2["VibratoRate"] = 76] = "VibratoRate";
      MidiControlChange2[MidiControlChange2["VibratoDepth"] = 77] = "VibratoDepth";
      MidiControlChange2[MidiControlChange2["VibratoDelay"] = 78] = "VibratoDelay";
      MidiControlChange2[MidiControlChange2["GeneralPurposeController5"] = 80] = "GeneralPurposeController5";
      MidiControlChange2[MidiControlChange2["GeneralPurposeController6"] = 81] = "GeneralPurposeController6";
      MidiControlChange2[MidiControlChange2["GeneralPurposeController7"] = 82] = "GeneralPurposeController7";
      MidiControlChange2[MidiControlChange2["GeneralPurposeController8"] = 83] = "GeneralPurposeController8";
      MidiControlChange2[MidiControlChange2["PortamentoControl"] = 84] = "PortamentoControl";
      MidiControlChange2[MidiControlChange2["HighResolutionVelocityPrefix"] = 88] = "HighResolutionVelocityPrefix";
      MidiControlChange2[MidiControlChange2["Effects1Depth"] = 91] = "Effects1Depth";
      MidiControlChange2[MidiControlChange2["Effects2Depth"] = 92] = "Effects2Depth";
      MidiControlChange2[MidiControlChange2["Effects3Depth"] = 93] = "Effects3Depth";
      MidiControlChange2[MidiControlChange2["Effects4Depth"] = 94] = "Effects4Depth";
      MidiControlChange2[MidiControlChange2["Effects5Depth"] = 95] = "Effects5Depth";
      MidiControlChange2[MidiControlChange2["DataIncrement"] = 96] = "DataIncrement";
      MidiControlChange2[MidiControlChange2["DataDecrement"] = 97] = "DataDecrement";
      MidiControlChange2[MidiControlChange2["NonRegisteredParameterNumberLSB"] = 98] = "NonRegisteredParameterNumberLSB";
      MidiControlChange2[MidiControlChange2["NonRegisteredParameterNumberMSB"] = 99] = "NonRegisteredParameterNumberMSB";
      MidiControlChange2[MidiControlChange2["RegisteredParameterNumberLSB"] = 100] = "RegisteredParameterNumberLSB";
      MidiControlChange2[MidiControlChange2["RegisteredParameterNumberMSB"] = 101] = "RegisteredParameterNumberMSB";
      MidiControlChange2[MidiControlChange2["AllSoundsOff"] = 120] = "AllSoundsOff";
      MidiControlChange2[MidiControlChange2["ResetAllControllers"] = 121] = "ResetAllControllers";
      MidiControlChange2[MidiControlChange2["LocalControlOnOff"] = 122] = "LocalControlOnOff";
      MidiControlChange2[MidiControlChange2["AllNotesOff"] = 123] = "AllNotesOff";
      MidiControlChange2[MidiControlChange2["OmniModeOff"] = 124] = "OmniModeOff";
      MidiControlChange2[MidiControlChange2["OmniModeOn"] = 125] = "OmniModeOn";
      MidiControlChange2[MidiControlChange2["MonoModeOn"] = 126] = "MonoModeOn";
      MidiControlChange2[MidiControlChange2["PolyModeOn"] = 127] = "PolyModeOn";
    })(MidiControlChange = exports.MidiControlChange || (exports.MidiControlChange = {}));
  }
});

// ../../../node_modules/@midival/core/dist/utils/clock.js
var require_clock = __commonJS({
  "../../../node_modules/@midival/core/dist/utils/clock.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ticksToBPM = exports.quarternoteToBPM = exports.averageIntervals = exports.computeIntervalsInMs = void 0;
    var sum = (a, b) => a + b;
    var computeIntervalsInMs = (ticks) => {
      const results = [];
      for (let i = 1; i < ticks.length; i++) {
        results.push(ticks[i] - ticks[i - 1]);
      }
      return results;
    };
    exports.computeIntervalsInMs = computeIntervalsInMs;
    var averageIntervals = (differences) => {
      if (!differences || !differences.length) {
        return 0;
      }
      return differences.reduce(sum) / differences.length;
    };
    exports.averageIntervals = averageIntervals;
    var quarternoteToBPM = (interval) => {
      return 6e4 / (interval * 24);
    };
    exports.quarternoteToBPM = quarternoteToBPM;
    var ticksToBPM = (ticks) => {
      if (!ticks || ticks.length < 2) {
        return 0;
      }
      return (0, exports.quarternoteToBPM)((0, exports.averageIntervals)((0, exports.computeIntervalsInMs)(ticks)));
    };
    exports.ticksToBPM = ticksToBPM;
  }
});

// ../../../node_modules/@midival/core/dist/errors.js
var require_errors = __commonJS({
  "../../../node_modules/@midival/core/dist/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MIDIValConfigurationError = exports.MIDIValError = void 0;
    var MIDIValError = class extends Error {
      constructor(message) {
        super(message);
      }
      get name() {
        return this.constructor.name;
      }
    };
    exports.MIDIValError = MIDIValError;
    var MIDIValConfigurationError = class extends MIDIValError {
    };
    exports.MIDIValConfigurationError = MIDIValConfigurationError;
  }
});

// ../../../node_modules/@midival/core/dist/types/messages.js
var require_messages = __commonJS({
  "../../../node_modules/@midival/core/dist/types/messages.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toProgramMessage = exports.toControlChangeMessage = exports.toNoteMessage = void 0;
    var toNoteMessage = (m) => Object.assign(Object.assign({}, m), { note: m.data1, velocity: m.data2 });
    exports.toNoteMessage = toNoteMessage;
    var toControlChangeMessage = (m) => Object.assign(Object.assign({}, m), { control: m.data1, value: m.data2 });
    exports.toControlChangeMessage = toControlChangeMessage;
    var toProgramMessage = (m) => Object.assign(Object.assign({}, m), { program: m.data1, value: m.data2 });
    exports.toProgramMessage = toProgramMessage;
  }
});

// ../../../node_modules/@midival/core/dist/MIDIValInput.js
var require_MIDIValInput = __commonJS({
  "../../../node_modules/@midival/core/dist/MIDIValInput.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MIDIValInput = void 0;
    var omnibus_1 = require_omnibus();
    var MIDIMessageConvert_1 = require_MIDIMessageConvert();
    var index_1 = require_dist();
    var pitchBend_1 = require_pitchBend();
    var midiCommands_1 = require_midiCommands();
    var midiControlChanges_1 = require_midiControlChanges();
    var clock_1 = require_clock();
    var errors_1 = require_errors();
    var messages_1 = require_messages();
    var TEMPO_SAMPLES_LIMIT = 20;
    var DefaultOptions = {
      computeClockTempo: false
    };
    var MIDIValInput = class {
      constructor(input, options = DefaultOptions) {
        this.omnibus = new omnibus_1.Omnibus();
        this.tempoSamples = [];
        this.registerInput(input);
        this.options = options;
      }
      /**
       * Returns new MIDIValInput object based on the interface id.
       * @param interfaceId id of the interface from the MIDIAcces object.
       * @throws MIDIValError when interface id is not found.
       * @returns Promise resolving to MIDIValInput.
       */
      static fromInterfaceId(interfaceId, options) {
        return __awaiter(this, void 0, void 0, function* () {
          const midiAccess = yield this.getMidiAccess();
          const input = midiAccess.inputs.find(({ id }) => id === interfaceId);
          if (!input) {
            throw new errors_1.MIDIValError(`${interfaceId} not found`);
          }
          return new MIDIValInput(input, options);
        });
      }
      /**
       * Finds first interface matching the name
       * @param interfaceName interface Name
       * @param options input configuration options
       * @throws MIDIValError when no interface with that name is found
       * @returns MIDIValInput object
       */
      static fromInterfaceName(interfaceName, options) {
        return __awaiter(this, void 0, void 0, function* () {
          const midiAccess = yield this.getMidiAccess();
          const input = midiAccess.inputs.find(({ name }) => name === interfaceName);
          if (!input) {
            throw new errors_1.MIDIValError(`${interfaceName} not found`);
          }
          return new MIDIValInput(input, options);
        });
      }
      static getMidiAccess() {
        return __awaiter(this, void 0, void 0, function* () {
          const midiAccess = yield index_1.MIDIVal.connect();
          return midiAccess;
        });
      }
      /**
       * Current MIDI Clock tempo
       * @throws MIDIValConfigurationError when computeClockTempo is not on.
       * @returns current tempo in BPM.
       */
      get tempo() {
        if (!this.options.computeClockTempo) {
          throw new errors_1.MIDIValConfigurationError("To use MIDIValInput.tempo you need to enable computeClockTempo option.");
        }
        return (0, clock_1.ticksToBPM)(this.tempoSamples);
      }
      registerInput(input) {
        return __awaiter(this, void 0, void 0, function* () {
          this.midiInput = input;
          this.unregisterInput = yield input.onMessage((e) => {
            if (e.data[0] === 240) {
              this.omnibus.trigger("sysex", e.data);
              return;
            }
            if (this.isClockCommand(e)) {
              return;
            }
            const midiMessage = (0, MIDIMessageConvert_1.toMidiMessage)(e.data);
            switch (midiMessage.command) {
              case midiCommands_1.MidiCommand.NoteOn:
                this.omnibus.trigger("noteOn", (0, messages_1.toNoteMessage)(midiMessage));
                break;
              case midiCommands_1.MidiCommand.NoteOff:
                this.omnibus.trigger("noteOff", (0, messages_1.toNoteMessage)(midiMessage));
                break;
              case midiCommands_1.MidiCommand.ControlChange:
                this.omnibus.trigger("controlChange", (0, messages_1.toControlChangeMessage)(midiMessage));
                break;
              case midiCommands_1.MidiCommand.ProgramChange:
                this.omnibus.trigger("programChange", (0, messages_1.toProgramMessage)(midiMessage));
                break;
              case midiCommands_1.MidiCommand.PolyKeyPressure:
                this.omnibus.trigger("polyKeyPressure", midiMessage);
                break;
              case midiCommands_1.MidiCommand.PitchBend:
                this.omnibus.trigger("pitchBend", (0, pitchBend_1.splitValueIntoFraction)([midiMessage.data1, midiMessage.data2]));
                break;
              default:
                console.log("unknown msg", midiMessage);
                break;
            }
          });
          if (this.options.computeClockTempo) {
            this.onClockPulse(() => {
              this.tempoSamples.push(performance.now());
              if (this.tempoSamples.length > TEMPO_SAMPLES_LIMIT) {
                this.tempoSamples.shift();
              }
            });
            const resetSamples = () => {
              this.tempoSamples = [];
            };
            this.onClockContinue(resetSamples);
            this.onClockStart(resetSamples);
          }
        });
      }
      isClockCommand(e) {
        switch (e.data[0]) {
          case midiCommands_1.MidiCommand.Clock.Pulse:
            this.omnibus.trigger("clockPulse");
            return true;
          case midiCommands_1.MidiCommand.Clock.Start:
            this.omnibus.trigger("clockStart");
            return true;
          case midiCommands_1.MidiCommand.Clock.Continue:
            this.omnibus.trigger("clockContinue");
            return true;
          case midiCommands_1.MidiCommand.Clock.Stop:
            this.omnibus.trigger("clockStop");
            return true;
          default:
            return false;
        }
      }
      onBusKeyValue(event, key, value, callback) {
        return this.omnibus.on(event, (...args) => {
          if (!args.length) {
            return;
          }
          const obj = args[0];
          if (obj[key] === value) {
            callback(obj);
          }
        });
      }
      /**
       * Disconnects all listeners.
       */
      disconnect() {
        this.omnibus.offAll();
        if (this.unregisterInput) {
          this.unregisterInput();
        }
      }
      /**
       * Registers new callback on every note on event.
       * @param callback Callback that will get called on each note on event.
       * @returns Callback to unregister.
       */
      onAllNoteOn(callback) {
        return this.omnibus.on("noteOn", callback);
      }
      /**
       * Registers new callback on specific note on event.
       * @param key the key number
       * @param callback Callback that gets called on every note on on this specific key
       * @returns Callback to unregister.
       */
      onNoteOn(key, callback) {
        return this.omnibus.on("noteOn", (midiMessage) => {
          if (midiMessage.note !== key) {
            return;
          }
          return callback(midiMessage);
        });
      }
      /**
       * Registers new callback on all notes off.
       * @param callback Callback that gets called on every note off.
       * @returns Unregister callback
       */
      onAllNoteOff(callback) {
        return this.omnibus.on("noteOff", callback);
      }
      /**
       * Registers new callback on specific note off.
       * @param key key number
       * @param callback Callback that gets called on every note off on this specific key
       * @returns Unregister callback
       */
      onNoteOff(key, callback) {
        return this.onBusKeyValue("noteOff", "note", key, callback);
      }
      /**
       * Registers new callback on pitch bend message
       * @param callback Callback that gets called on every pitch bend message. It gets value of the bend in the range of -1.0 to 1.0 using 16-bit precision (if supported by sending device).
       * @returns Unregister callback.
       */
      onPitchBend(callback) {
        return this.omnibus.on("pitchBend", callback);
      }
      /**
       * Registers callback on every control change message
       * @param callback Callback that will get called on control change.
       * @returns Unregister callback.
       */
      onAllControlChange(callback) {
        return this.omnibus.on("controlChange", callback);
      }
      /**
       * Registers callback on specific control change key.
       * @param channel Control change channel value
       * @param callback Callback to be called
       * @returns Unregister function
       */
      onControlChange(control, callback) {
        if ((0, MIDIMessageConvert_1.isChannelMode)(control)) {
          console.warn("use designated Channel Mode callback instead of onControlChange for " + control);
        }
        return this.omnibus.on("controlChange", (m) => {
          if (m.control !== control) {
            return;
          }
          callback(m);
        });
      }
      /**
       * Registers callback to be called on every program change event
       * @param callback Callback to be called
       * @returns Unregister function.
       */
      onAllProgramChange(callback) {
        return this.omnibus.on("programChange", callback);
      }
      /**
       * Registers callback to be called on specific program change
       * @param key Program value for key change
       * @param callback Callback to be called
       * @returns Unregister function
       */
      onProgramChange(program, callback) {
        return this.onBusKeyValue("programChange", "program", program, callback);
      }
      /**
       * Registers callback on all poly key pressure events
       * @param callback Callback to be called
       * @returns Unregister function
       */
      onAllPolyKeyPressure(callback) {
        return this.omnibus.on("polyKeyPressure", callback);
      }
      /**
       * Registers callback on specific poly key pressure event
       * @param key Key for poly key pressure
       * @param callback Callback to be called
       * @returns Unregister function
       */
      onPolyKeyPressure(key, callback) {
        return this.onBusKeyValue("polyKeyPressure", "data1", key, callback);
      }
      /**
       * Registers callback on sysex message
       * @param callback Callback to be called
       * @returns Unregister callback
       */
      onSysex(callback) {
        return this.omnibus.on("sysex", callback);
      }
      /**
       * Registers callback on all sounds off event
       * @param callback Callback to be called
       * @returns Unregister callback
       */
      onAllSoundsOff(callback) {
        return this.onBusKeyValue("controlChange", "control", midiControlChanges_1.MidiControlChange.AllSoundsOff, callback);
      }
      /**
       * Registers callback on reset all controllers event
       * @param callback Callback to be called
       * @returns Unregister callback
       */
      onResetAllControllers(callback) {
        return this.onBusKeyValue("controlChange", "control", midiControlChanges_1.MidiControlChange.ResetAllControllers, callback);
      }
      /**
       * Registers callback on local control change event
       * @param callback Callback to be called: first argument to the callback is a boolean representing if the local control was set on or off
       * @returns Unregister event
       */
      onLocalControlChange(callback) {
        return this.onBusKeyValue("controlChange", "control", midiControlChanges_1.MidiControlChange.LocalControlOnOff, (m) => {
          callback(m.data2 === 127, m);
        });
      }
      /**
       * Registers callback on all notes off
       * @param callback Callback to be called
       * @returns Unregister callback
       */
      onAllNotesOff(callback) {
        return this.onBusKeyValue("controlChange", "control", midiControlChanges_1.MidiControlChange.AllNotesOff, callback);
      }
      onOmniModeOff(callback) {
        return this.onBusKeyValue("controlChange", "control", midiControlChanges_1.MidiControlChange.OmniModeOff, callback);
      }
      onOmniModeOn(callback) {
        return this.onBusKeyValue("controlChange", "control", midiControlChanges_1.MidiControlChange.OmniModeOn, callback);
      }
      onMonoModeOn(callback) {
        return this.onBusKeyValue("controlChange", "control", midiControlChanges_1.MidiControlChange.MonoModeOn, callback);
      }
      onPolyModeOn(callback) {
        return this.onBusKeyValue("controlChange", "control", midiControlChanges_1.MidiControlChange.PolyModeOn, callback);
      }
      onClockPulse(callback) {
        return this.omnibus.on("clockPulse", callback);
      }
      onClockStart(callback) {
        return this.omnibus.on("clockStart", callback);
      }
      onClockStop(callback) {
        return this.omnibus.on("clockStop", callback);
      }
      onClockContinue(callback) {
        return this.omnibus.on("clockContinue", callback);
      }
    };
    exports.MIDIValInput = MIDIValInput;
  }
});

// ../../../node_modules/@midival/core/dist/MIDIValOutput.js
var require_MIDIValOutput = __commonJS({
  "../../../node_modules/@midival/core/dist/MIDIValOutput.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MIDIValOutput = void 0;
    var index_1 = require_dist();
    var pitchBend_1 = require_pitchBend();
    var midiCommands_1 = require_midiCommands();
    var midiControlChanges_1 = require_midiControlChanges();
    var MIDIValOutput = class {
      constructor(output) {
        this.midiOutput = output;
        this.defaultChannel = 1;
      }
      /**
       * Sends raw message to MIDI out
       * @param msgs Message as an array of UInt8 values
       * @returns
       */
      send(msgs) {
        if (!this.midiOutput) {
          return;
        }
        this.midiOutput.send(msgs);
      }
      /**
       * Changes default channel the messages are sent on
       * @param channel Channel value. Integer between 1 and 16
       */
      setChannel(channel) {
        this.defaultChannel = channel;
      }
      getChannel(channel) {
        if (!channel) {
          return this.defaultChannel - 1;
        }
        return channel - 1;
      }
      /**
       * Creates MIDIValOutput based on the interface name
       * @param interfaceName Name of the interface
       * @returns MIDIValOutput object
       */
      static fromInterfaceName(interfaceName) {
        return __awaiter(this, void 0, void 0, function* () {
          const midiAccess = yield this.getMidiAccess();
          const output = midiAccess.outputs.find(({ name }) => name === interfaceName);
          if (!output) {
            throw new Error(`${interfaceName} not found`);
          }
          return new MIDIValOutput(output);
        });
      }
      static getMidiAccess() {
        return __awaiter(this, void 0, void 0, function* () {
          const midiAccess = yield index_1.MIDIVal.connect();
          return midiAccess;
        });
      }
      /**
       * Sends note on message
       * @param note Note key value to be sent.
       * @param velocity Velocity - number between 0 and 128
       * @param channel Channel. By default will use channel set by setChannel method
       * @returns
       */
      sendNoteOn(note, velocity, channel) {
        return this.send([
          midiCommands_1.MidiCommand.NoteOn + this.getChannel(channel),
          note,
          velocity
        ]);
      }
      /**
       * Sends note off message.
       * @param note Note key to be set off
       * @param channel Channel. By default will use channel set by setChannel method
       * @returns
       */
      sendNoteOff(note, channel) {
        return this.send([midiCommands_1.MidiCommand.NoteOff + this.getChannel(channel), note, 0]);
      }
      sendPolyKeyPressure(key, velocity, channel) {
        return this.send([
          midiCommands_1.MidiCommand.PolyKeyPressure + this.getChannel(channel),
          key,
          velocity
        ]);
      }
      sendControlChange(controller, value, channel) {
        return this.send([
          midiCommands_1.MidiCommand.ControlChange + this.getChannel(channel),
          controller,
          value
        ]);
      }
      sendProgramChange(program, channel) {
        return this.send([
          midiCommands_1.MidiCommand.ProgramChange + this.getChannel(channel),
          program
        ]);
      }
      sendChannelPressure(velocity, channel) {
        return this.send([
          midiCommands_1.MidiCommand.ChannelPressure + this.getChannel(channel),
          velocity
        ]);
      }
      /**
       * Sends pitch bend value.
       * @param bendValue Ben value ranging from -1.0 to 1.0.
       * @param channel Optional channel on which bend should be sent on
       * @returns
       * @throws Throws exception if bendValue is outside the range.
       */
      sendPitchBend(bendValue, channel) {
        return this.send(new Uint8Array([
          midiCommands_1.MidiCommand.PitchBend + this.getChannel(channel),
          ...(0, pitchBend_1.fractionToPitchBendAsUints)(bendValue)
        ]));
      }
      // Special Channel Modes
      sendAllSoundOff(channel) {
        return this.send([
          midiCommands_1.MidiCommand.ControlChange + this.getChannel(channel),
          midiControlChanges_1.MidiControlChange.AllSoundsOff,
          0
        ]);
      }
      sendResetAllControllers(channel) {
        return this.send([
          midiCommands_1.MidiCommand.ControlChange + this.getChannel(channel),
          midiControlChanges_1.MidiControlChange.ResetAllControllers,
          0
        ]);
      }
      sendLocalControlOff(channel) {
        return this.send([
          midiCommands_1.MidiCommand.ControlChange + this.getChannel(channel),
          midiControlChanges_1.MidiControlChange.LocalControlOnOff,
          0
        ]);
      }
      sendLocalControlOn(channel) {
        return this.send([
          midiCommands_1.MidiCommand.ControlChange + this.getChannel(channel),
          midiControlChanges_1.MidiControlChange.LocalControlOnOff,
          127
        ]);
      }
      sendAllNotesOff(channel) {
        return this.send([
          midiCommands_1.MidiCommand.ControlChange + this.getChannel(channel),
          midiControlChanges_1.MidiControlChange.AllNotesOff,
          0
        ]);
      }
      sendClockStart() {
        return this.send([midiCommands_1.MidiCommand.Clock.Start]);
      }
      sendClockStop() {
        return this.send([midiCommands_1.MidiCommand.Clock.Stop]);
      }
      sendClockContinue() {
        return this.send([midiCommands_1.MidiCommand.Clock.Continue]);
      }
      sendClockPulse() {
        return this.send([midiCommands_1.MidiCommand.Clock.Pulse]);
      }
    };
    exports.MIDIValOutput = MIDIValOutput;
  }
});

// ../../../node_modules/@midival/core/dist/wrappers/outputs/BrowserMIDIOutput.js
var require_BrowserMIDIOutput = __commonJS({
  "../../../node_modules/@midival/core/dist/wrappers/outputs/BrowserMIDIOutput.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BrowserMIDIOutput = void 0;
    var BrowserMIDIOutput = class {
      constructor(output) {
        this.output = output;
      }
      send(data) {
        this.output.send(data);
      }
      get id() {
        return this.output.id;
      }
      get name() {
        return this.output.name;
      }
      get manufacturer() {
        return this.output.manufacturer;
      }
    };
    exports.BrowserMIDIOutput = BrowserMIDIOutput;
  }
});

// ../../../node_modules/@midival/core/dist/wrappers/inputs/BrowserMIDIInput.js
var require_BrowserMIDIInput = __commonJS({
  "../../../node_modules/@midival/core/dist/wrappers/inputs/BrowserMIDIInput.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BrowserMIDIInput = void 0;
    var BrowserMIDIInput = class {
      constructor(input) {
        this.input = input;
      }
      onMessage(fn) {
        return __awaiter(this, void 0, void 0, function* () {
          yield this.input.open();
          this.input.addEventListener("midimessage", fn);
          return () => {
            this.input.removeEventListener("midimessage", fn);
          };
        });
      }
      get id() {
        return this.input.id;
      }
      get name() {
        return this.input.name;
      }
      get manufacturer() {
        return this.input.manufacturer;
      }
    };
    exports.BrowserMIDIInput = BrowserMIDIInput;
  }
});

// ../../../node_modules/@midival/core/dist/wrappers/access/BrowserMIDIAccess.js
var require_BrowserMIDIAccess = __commonJS({
  "../../../node_modules/@midival/core/dist/wrappers/access/BrowserMIDIAccess.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BrowserMIDIAccess = void 0;
    var BrowserMIDIOutput_1 = require_BrowserMIDIOutput();
    var BrowserMIDIInput_1 = require_BrowserMIDIInput();
    var omnibus_1 = require_omnibus();
    var BrowserMIDIAccess = class {
      constructor() {
        this.bus = new omnibus_1.Omnibus();
      }
      onInputConnected(callback) {
        return this.bus.on("inputConnected", callback);
      }
      onInputDisconnected(callback) {
        return this.bus.on("inputDisconnected", callback);
      }
      onOutputConnected(callback) {
        return this.bus.on("outputConnected", callback);
      }
      onOutputDisconnected(callback) {
        return this.bus.on("outputDisconnected", callback);
      }
      connect(sysex = false) {
        return __awaiter(this, void 0, void 0, function* () {
          if (!navigator.requestMIDIAccess) {
            throw new Error("requestMIDIAccess not available, make sure you are using MIDI-compatible browser.");
          }
          this.access = yield navigator.requestMIDIAccess({ sysex });
          this.listenOnStateChange();
        });
      }
      get outputs() {
        return Array.from(this.access.outputs).map(([, output]) => new BrowserMIDIOutput_1.BrowserMIDIOutput(output));
      }
      get inputs() {
        return Array.from(this.access.inputs).map(([, input]) => new BrowserMIDIInput_1.BrowserMIDIInput(input));
      }
      getInputById(inputId) {
        const input = Array.from(this.access.inputs).map(([, input2]) => input2).find(({ id }) => id === inputId);
        if (!input) {
          throw new Error(`Cannot find input ${inputId}`);
        }
        return new BrowserMIDIInput_1.BrowserMIDIInput(input);
      }
      getOutputById(outputId) {
        const output = Array.from(this.access.outputs).map(([, output2]) => output2).find(({ id }) => id === outputId);
        if (!output) {
          throw new Error(`Cannot find output ${outputId}`);
        }
        return new BrowserMIDIOutput_1.BrowserMIDIOutput(output);
      }
      listenOnStateChange() {
        this.access.addEventListener("statechange", (e) => {
          if (e.port.type === "input") {
            switch (e.port.state) {
              case "disconnected":
                this.bus.trigger("inputDisconnected", new BrowserMIDIInput_1.BrowserMIDIInput(e.port));
                break;
              case "connected":
                this.bus.trigger("inputConnected", new BrowserMIDIInput_1.BrowserMIDIInput(e.port));
                break;
            }
          } else {
            switch (e.port.state) {
              case "disconnected":
                this.bus.trigger("outputDisconnected", new BrowserMIDIOutput_1.BrowserMIDIOutput(e.port));
                break;
              case "connected":
                this.bus.trigger("outputConnected", new BrowserMIDIOutput_1.BrowserMIDIOutput(e.port));
                break;
            }
          }
        });
      }
    };
    exports.BrowserMIDIAccess = BrowserMIDIAccess;
  }
});

// ../../../node_modules/@midival/core/dist/MIDIval.js
var require_MIDIval = __commonJS({
  "../../../node_modules/@midival/core/dist/MIDIval.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MIDIVal = exports.matchesConfig = void 0;
    var MIDIValInput_1 = require_MIDIValInput();
    var MIDIValOutput_1 = require_MIDIValOutput();
    var BrowserMIDIAccess_1 = require_BrowserMIDIAccess();
    var matchesConfig = (input, scheme) => {
      return Object.keys(scheme).reduce((acc, key) => {
        const val = scheme[key];
        if (typeof val === "string") {
          return acc && input[key] === val;
        } else {
          return acc && val.test(input[key]);
        }
      }, true);
    };
    exports.matchesConfig = matchesConfig;
    var MIDIVal = class {
      /**
       * Allows to reconfigure access object to use project in different environment as the default one (browser): See @midival/node, @midival/react-native for more details.
       * @param newAccess Implementation of IMIDIAccess to be used to provide MIDI objects.
       */
      static configureAccessObject(newAccess) {
        this.isSetupComplete = false;
        this.accessObject = newAccess;
      }
      /**
       * Calls callback on every input device that gets connected.
       * @param callback Callback to be registered
       * @param callOnAlreadyConnected If set to true, the function will instantly trigger for all already connected devices. Default to false
       * @returns Promise resolving to unregister callback when finishes.
       */
      static onInputDeviceConnected(callback, callOnAlreadyConnected = false) {
        return __awaiter(this, void 0, void 0, function* () {
          if (callOnAlreadyConnected) {
            this.accessObject.inputs.forEach(callback);
          }
          return this.accessObject.onInputConnected(callback);
        });
      }
      /**
       * Listens to all input devices with a certain config (like name or manufacturer). Configuration can be provided as a string or regex. The callback unlike `onInputDeviceConnected` accepts MIDIValInput. `onInputDeviceConnected` is suitable when you want to filter devices yourself, beyond this configuration object so it does not instantiate objects.
       * @param config Configuration object used to match with device connected
       * @param fn Callback on connection. Connection is already wrapped in MIDIValInput object
       * @returns Promise for Unregister Callback
       */
      static onInputDeviceWithConfigConnected(config, fn, callOnAlreadyConnected = false) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.onInputDeviceConnected((input) => {
            if ((0, exports.matchesConfig)(input, config)) {
              fn(new MIDIValInput_1.MIDIValInput(input));
            }
          }, callOnAlreadyConnected);
        });
      }
      /**
       * Listens to all output devices with a certain config (like name or manufacturer). Configuration can be provided as a string or regex. The callback unlike `onOutputDeviceConnected` accepts MIDIValOutput. `onOutputDeviceConnected` is suitable when you want to filter devices yourself, beyond this configuration object so it does not instantiate objects.
       * @param config Configuration object used to match with device connected
       * @param fn Callback on connection. Connection is already wrapped in MIDIValOutput object
       * @returns Promise for Unregister Callback
       */
      static onOutputDeviceWithConfigConnected(config, fn, callOnAlreadyConnected = false) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.onOutputDeviceConnected((output) => {
            if ((0, exports.matchesConfig)(output, config)) {
              fn(new MIDIValOutput_1.MIDIValOutput(output));
            }
          }, callOnAlreadyConnected);
        });
      }
      /**
       * Calls callback on every output device that gets connected.
       * @param callback Callback to be registered
       * @param callOnAlreadyConnected If set to true, the function will instantly trigger for all already connected devices. Default to false
       * @returns Promise resolving to unregister callback when finishes.
       */
      static onOutputDeviceConnected(callback, callOnAlreadyConnected = false) {
        return __awaiter(this, void 0, void 0, function* () {
          if (callOnAlreadyConnected) {
            this.accessObject.outputs.forEach(callback);
          }
          return this.accessObject.onOutputConnected(callback);
        });
      }
      /**
       * Regusters callback on an event of input device being disconnected.
       * @param callback Callback to be called.
       * @returns promise resolving to unregister callback
       */
      static onInputDeviceDisconnected(callback) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.accessObject.onInputDisconnected(callback);
        });
      }
      /**
       * Regusters callback on an event of input device being disconnected.
       * @param callback Callback to be called.
       * @returns promise resolving to unregister callback
       */
      static onOutputDeviceDisconnected(callback) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.accessObject.onOutputDisconnected(callback);
        });
      }
      /**
       * Creates MIDIValInput instance from implementation of IMIDIInput interface.
       * @param input Implementation of IMIDIInput interface
       * @returns MIDIValInput object
       */
      static fromMIDIInput(input) {
        return new MIDIValInput_1.MIDIValInput(input);
      }
      /**
       * Creates MIDIValOutput instance from implementation of IMIDIOut interface
       * @param output Implementation of IMIDIOutput interface
       * @returns MIDIValOutput object
       */
      static fromMIDIOutput(output) {
        return new MIDIValOutput_1.MIDIValOutput(output);
      }
      /**
       * Connects to MIDI interface and returns implementation of IMIDIAccess
       * @returns Promise resolving to IMIDIAccess
       */
      static connect() {
        return __awaiter(this, void 0, void 0, function* () {
          yield this.setupDeviceWatchers();
          return this.accessObject;
        });
      }
      static setupDeviceWatchers() {
        return __awaiter(this, void 0, void 0, function* () {
          if (this.isSetupComplete) {
            return;
          }
          this.isSetupComplete = true;
          if (!this.accessObject) {
            this.accessObject = new BrowserMIDIAccess_1.BrowserMIDIAccess();
          }
          yield this.accessObject.connect();
        });
      }
    };
    exports.MIDIVal = MIDIVal;
    MIDIVal.isSetupComplete = false;
  }
});

// ../../../node_modules/@midival/core/dist/index.js
var require_dist = __commonJS({
  "../../../node_modules/@midival/core/dist/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MIDIValOutput = exports.MIDIValInput = exports.MIDIVal = void 0;
    var MIDIval_1 = require_MIDIval();
    Object.defineProperty(exports, "MIDIVal", { enumerable: true, get: function() {
      return MIDIval_1.MIDIVal;
    } });
    var MIDIValInput_1 = require_MIDIValInput();
    Object.defineProperty(exports, "MIDIValInput", { enumerable: true, get: function() {
      return MIDIValInput_1.MIDIValInput;
    } });
    var MIDIValOutput_1 = require_MIDIValOutput();
    Object.defineProperty(exports, "MIDIValOutput", { enumerable: true, get: function() {
      return MIDIValOutput_1.MIDIValOutput;
    } });
  }
});
export default require_dist();
//# sourceMappingURL=@midival_core.js.map
